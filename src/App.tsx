import React, {useRef} from 'react';
import './App.css';

interface IDotProps {
  x: number
  y: number
  // width: number
  dots: Uint8ClampedArray
}

const Dot = ({x, y, dots}: IDotProps) => {
  let col:string = '#'+
      dots[0].toString(16).padStart(2, '0') +
      dots[1].toString(16).padStart(2, '0') +
      dots[2].toString(16).padStart(2, '0')
  
  let style = {
    width: '16px',
    height: '16px',
    borderColor: 'white',
    borderWidth: '1px',
    borderStyle: 'solid',
    margin: '-1px',
    backgroundColor: col,
    display: 'inline-block'
  }
  return (<div style={style}> </div>)
}

interface IMatrixProps {
  width: number
  height: number
  dots: Uint8ClampedArray
}

const Matrix = ({width, height, dots}: IMatrixProps) => {
  let mat: any[] = []
  for (let y = 0; y < height; y++) {
    let row: any[] = []
    for (let x = 0; x < width; x++) {
      let ix = (y * width + x) * 4;
      // @ts-ignore
      row.push((<Dot x={x} y={y} dots={dots.slice(ix)}> </Dot>))
    }
    mat.push((<div style={{height: '16px'}}>{row}</div>))
  }
  return (
      <div style={{width: width * 16 + 'px'}}>
        {mat}
      </div>
  )
}

interface IEnterMapProps {
  dots: Uint8ClampedArray
}

const EntireMap = ({dots} :IEnterMapProps) => {

  const canvasRef = useRef(null);

  const getContext = (): CanvasRenderingContext2D => {
    const canvas: any = canvasRef.current;

    return canvas.getContext('2d');
  };

  React.useEffect(() => {
    let tmp = new OffscreenCanvas(8, 8)
    let ctx0 = tmp.getContext('2d')
    if (ctx0 != null) {
      let data = ctx0.createImageData(8, 8)
      for (let i = 0;i < 64 * 4;i++) {
        data.data[i] = dots[i]
      }
      ctx0.putImageData(data, 0, 0)

      let ctx = getContext()
      ctx.imageSmoothingEnabled = false
      ctx.drawImage(tmp,0,0,8,8,0,0,32,32)
    }
  })
  return (
      <div style={{height: '64px'}}>
        <canvas className={'canvas'} ref={canvasRef} width={32} height={32}/>
      </div>
  )
}

const App: React.FC = () => {
  const [width, setWidth] = React.useState(8)
  const [height, setHeight] = React.useState(8)
  const [dots, setDots] = React.useState(new Uint8ClampedArray(// width * height * 4))
      [
    0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x80, 0xff,
    0x00, 0x80, 0x00, 0xff,
    0x00, 0x80, 0x80, 0xff,
    0x80, 0x00, 0x00, 0xff,
    0x80, 0x00, 0x80, 0xff,
    0x80, 0x80, 0x00, 0xff,
    0x80, 0x80, 0x80, 0xff,
    0x40, 0x40, 0x40, 0xff,
    0x00, 0x00, 0xf0, 0xff,
    0x00, 0xf0, 0x00, 0xff,
    0x00, 0xf0, 0xf0, 0xff,
    0xf0, 0x00, 0x00, 0xff,
    0xf0, 0x00, 0xf0, 0xff,
    0xf0, 0xf0, 0x00, 0xff,
    0xf0, 0xf0, 0xf0, 0xff,
    0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x80, 0xff,
    0x00, 0x80, 0x00, 0xff,
    0x00, 0x80, 0x80, 0xff,
    0x80, 0x00, 0x00, 0xff,
    0x80, 0x00, 0x80, 0xff,
    0x80, 0x80, 0x00, 0xff,
    0x80, 0x80, 0x80, 0xff,
    0x40, 0x40, 0x40, 0xff,
    0x00, 0x00, 0xf0, 0xff,
    0x00, 0xf0, 0x00, 0xff,
    0x00, 0xf0, 0xf0, 0xff,
    0xf0, 0x00, 0x00, 0xff,
    0xf0, 0x00, 0xf0, 0xff,
    0xf0, 0xf0, 0x00, 0xff,
    0xf0, 0xf0, 0xf0, 0xff,
    0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x80, 0xff,
    0x00, 0x80, 0x00, 0xff,
    0x00, 0x80, 0x80, 0xff,
    0x80, 0x00, 0x00, 0xff,
    0x80, 0x00, 0x80, 0xff,
    0x80, 0x80, 0x00, 0xff,
    0x80, 0x80, 0x80, 0xff,
    0x40, 0x40, 0x40, 0xff,
    0x00, 0x00, 0xf0, 0xff,
    0x00, 0xf0, 0x00, 0xff,
    0x00, 0xf0, 0xf0, 0xff,
    0xf0, 0x00, 0x00, 0xff,
    0xf0, 0x00, 0xf0, 0xff,
    0xf0, 0xf0, 0x00, 0xff,
    0xf0, 0xf0, 0xf0, 0xff,
    0x00, 0x00, 0x00, 0xff,
    0x00, 0x00, 0x80, 0xff,
    0x00, 0x80, 0x00, 0xff,
    0x00, 0x80, 0x80, 0xff,
    0x80, 0x00, 0x00, 0xff,
    0x80, 0x00, 0x80, 0xff,
    0x80, 0x80, 0x00, 0xff,
    0x80, 0x80, 0x80, 0xff,
    0x40, 0x40, 0x40, 0xff,
    0x00, 0x00, 0xf0, 0xff,
    0x00, 0xf0, 0x00, 0xff,
    0x00, 0xf0, 0xf0, 0xff,
    0xf0, 0x00, 0x00, 0xff,
    0xf0, 0x00, 0xf0, 0xff,
    0xf0, 0xf0, 0x00, 0xff,
    0xf0, 0xf0, 0xf0, 0xff,
  ]))

  return (
    <div className="App">
      {/*<header className="App-header">*/}
      {/*</header>*/}
      <EntireMap dots={dots}/>
      <Matrix width={width} height={height} dots={dots}/>
    </div>
  );
}

export default App;
